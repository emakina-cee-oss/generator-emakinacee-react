$global-font-scaling: 100% !default;

// STRIP UNIT
// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
@function _strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// TO REM
// Converts a pixel value to matching rem value.
// *Any* value passed, regardless of unit, is assumed to be a pixel value.
// By default, the base pixel value used to calculate the rem value is taken from the `$global-font-scaling` variable.
@function _to-rem($value, $base: null) {

    // Check if the value is a number
    @if type-of($value) != 'number' {
        //@warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
        @return $value;
    }

    // Calculate rem if units for $value is not rem
    @if unit($value) != 'rem' {
        $value: _strip-unit($value) / _strip-unit($base) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
        $value: 0;
    }

    @return $value;
}

// REM
// Converts one or more pixel values into matching rem values.
@function rem($values, $base: null) {
    $rem-values: ();
    $count: length($values);

    // If no base is defined, defer to the global font size
    @if $base == null {
        $base: $global-font-scaling;
    }

    // If the base font size is a %, then multiply it by 16px
    // This is because 100% font size = 16px in most all browsers
    @if unit($base) == '%' {
        $base: ($base / 100%) * 16px;
    }

    @if $count == 1 {
        @return _to-rem($values, $base);
    }

    @for $i from 1 through $count {
        $rem-values: append($rem-values, _to-rem(nth($values, $i), $base));
    }

    @return $rem-values;
}

// EM
// Converts a unitless, pixel, or rem value to em, for use in breakpoints
@function em($value) {

    // Pixel and unitless values are converted to rems
    @if unit($value) == 'px' or unitless($value) {
        $value: rem($value, $base: 16px);
    }

    // Then the value is converted to ems
    @return _strip-unit($value) * 1em;
}
